import {expressionAnalyzer} from "../library/expressionAnalyzer.js";

function is_correct(expression, resault){
    var expression = expressionAnalyzer.GetResult(expression);
    expect(expression).toBe(resault);
}

test('1=1', () => {
    is_correct('1', 1);
});

test('3=3', () => {
    is_correct('3', 3);
});

test('42.25=42.25', () => {
    is_correct('42.25', 42.25);
});

test('1+1=2', () => {
    is_correct('1+1', 2);
});

test('2+1=3', () => {
    is_correct('2+1', 3);
});

test('1+2=3', () => {
    is_correct('1+2', 3);
});

test('1+2.1=3.1', () => {
    is_correct('1+2.1', 3.1);
});

test('1.1+2=3.1', () => {
    is_correct('1.1+2', 3.1);
});

test('1-1=0', () => {
    is_correct('1-1', 0);
});

test('1-2=-1', () => {
    is_correct('1-2', -1);
});

test('2-1=1', () => {
    is_correct('2-1', 1);
});

test('1-2.5=-1.5', () => {
    is_correct('1-2.5', -1.5);
});

test('1.5-2=-0.5', () => {
    is_correct('1.5-2', -0.5);
});

test('1×1=1', () => {
    is_correct('1×1', 1);
});

test('1×2=2', () => {
    is_correct('1×2', 2);
});

test('2×1=2', () => {
    is_correct('2×1', 2);
});

test('2.5×1=2.5', () => {
    is_correct('2.5×1', 2.5);
});

test('2×1.5=3', () => {
    is_correct('2×1.5', 3);
});

test('1÷1=1', () => {
    is_correct('1÷1', 1);
});

test('4÷2=2', () => {
    is_correct('4÷2', 2);
});

test('2÷1=2', () => {
    is_correct('2÷1', 2);
});

test('3÷2.5=1.2', () => {
    is_correct('3÷2.5', 1.2);
});

test('2^2=4', () => {
    is_correct('2^2', 4);
});

test('2^3=8', () => {
    is_correct('2^3', 8);
});

test('2^0=1', () => {
    is_correct('2^0', 1);
});

test('2^1=2', () => {
    is_correct('2^1', 2);
});

test('1.5^2=2.25', () => {
    is_correct('1.5^2', 2.25);
});

test('4^2.5=32', () => {
    is_correct('4^2.5', 32);
});

test('1-1+1=1', () => {
    is_correct('1-1+1', 1);
});

test('1-3+1=-1', () => {
    is_correct('1-3+1', -1);
});

test('1-3+2=0', () => {
    is_correct('1-3+2', 0);
});

test('1-3.5+2=-0.5', () => {
    is_correct('1-3.5+2', -0.5);
});

test('2+3×10=32', () => {
    is_correct('2+3×10', 32);
});

test('2×3+10=16', () => {
    is_correct('2×3+10', 16);
});

test('2×3-10=-4', () => {
    is_correct('2×3-10', -4);
});

test('52-2×3+10=56', () => {
    is_correct('52-2×3+10', 56);
});

test('52.5-2×3+10=56.5', () => {
    is_correct('52.5-2×3+10', 56.5);
});

test('2+4÷2=4', () => {
    is_correct('2+4÷2', 4);
});

test('8÷4+2=4', () => {
    is_correct('8÷4+2', 4);
});

test('2-4÷2=0', () => {
    is_correct('2-4÷2', 0);
});

test('8÷4-2=0', () => {
    is_correct('8÷4-2', 0);
});

test('2×3-10=-4', () => {
    is_correct('2×3-10', -4);
});

test('52-8÷4+10=60', () => {
    is_correct('52-8÷4+10', 60);
});

test('52.5-8÷4+10.5=61', () => {
    is_correct('52.5-8÷4+10.5', 61);
});

test('5×8÷4+10=20', () => {
    is_correct('5×8÷4+10', 20);
});

test('5-8÷4×10=-15', () => {
    is_correct('5-8÷4×10', -15);
});

test('5+8÷4×10=25', () => {
    is_correct('5+8÷4×10', 25);
});

test('5×8÷4-10=0', () => {
    is_correct('5×8÷4-10', 0);
});

test('5.5×8÷4-10=1', () => {
    is_correct('5.5×8÷4-10', 1);
});

test('5×2÷4^2=0.625', () => {
    is_correct('5×2÷4^2', 0.625);
});

test('5×3^2÷2=22.5', () => {
    is_correct('5×3^2÷2', 22.5);
});

test('5^2-2×2=21', () => {
    is_correct('5^2-2×2', 21);
});

test('5^3÷2×2=125', () => {
    is_correct('5^3÷2×2', 125);
});

test('5^3÷2.5×2=100', () => {
    is_correct('5^3÷2.5×2', 100);
});

test('5×(2÷4)^2=1.25', () => {
    is_correct('5×(2÷4)^2', 1.25);
});

test('(5×3)^2÷2=112.5', () => {
    is_correct('(5×3)^2÷2', 112.5);
});

test('5^(2-2)×2=2', () => {
    is_correct('5^(2-2)×2', 2);
});

test('5^(3÷2×2)=125', () => {
    is_correct('5^(3÷2×2)', 125);
});

test('(2+3)^2=25', () => {
    is_correct('(2+3)^2', 25);
});

test('(2+5+9)÷2=8', () => {
    is_correct('(2+5+9)÷2', 8);
});

test('(2+5.5+9)÷2=8.25', () => {
    is_correct('(2+5.5+9)÷2', 8.25);
});

test('5+8×45÷56^251%65=5', () => {
    is_correct('5+8×45÷56^251%65', 5);
});

test('5+8×46÷2%1+65=70', () => {
    is_correct('5+8×46÷2%1+65', 70);
});

test('5+8×46%2+1+65=71', () => {
    is_correct('5+8×46%2+1+65', 71);
});

test('5+8%46÷2-251+65=-177', () => {
    is_correct('5+8%46÷2-251+65', -177);
});

test('5%8-46÷4-251+65=-192.5', () => {
    is_correct('5%8-46÷4-251+65', -192.5);
});

test('5%8+46÷4+251+65.5=333', () => {
    is_correct('5%8+46÷4+251+65.5', 333);
});

test('(5+8×45)%5=0', () => {
    is_correct('(5+8×45)%5', 0);
});

test('5+8×45÷(4^3%3)=365', () => {
    is_correct('5+8×45÷(4^3%3)', 365);
});

test('5+((8×46)÷2%1)+65=70', () => {
    is_correct('5+((8×46)÷2%1)+65', 70);
});

test('((5+8)×46)%(2+1+65)=54', () => {
    is_correct('((5+8)×46)%(2+1+65)', 54);
});

test('((5+8)%46÷2)-(251+65)=-309.5', () => {
    is_correct('((5+8)%46÷2)-(251+65)', -309.5);
});

test('(5%8-46÷4)-(251+65)=-322.5', () => {
    is_correct('(5%8-46÷4)-(251+65)', -322.5);
});

test('(5%8-46÷4)-(2.55+35)=-44.05', () => {
    is_correct('(5%8-46÷4)-(2.55+35)', -44.05);
});

test('3!=6', () => {
    is_correct('3!', 6);
});

test('2!=2', () => {
    is_correct('2!', 2);
});

test('1!=1', () => {
    is_correct('1!', 1);
});

test('0!=1', () => {
    is_correct('0!', 1);
});

test('(5+2)!=5040', () => {
    is_correct('(5+2)!', 5040);
});

test('5!+8-46÷4-251+65=-69.5', () => {
    is_correct('5!+8-46÷4-251+65', -69.5);
});

test('(1+2)!-46÷4-251+65=-191.5', () => {
    is_correct('(1+2)!-46÷4-251+65', -191.5);
});

test('(1+2!)-46÷4-251+65=-194.5', () => {
    is_correct('(1+2!)-46÷4-251+65', -194.5);
});

test('(1+2!)-46÷4-2!+5=-5.5', () => {
    is_correct('(1+2!)-46÷4-2!+5', -5.5);
});

test('(1+2!)-46÷4-2!+5.5=-5', () => {
    is_correct('(1+2!)-46÷4-2!+5.5', -5);
});

test('(1.5+2!)-46÷4-2!+5.5=-4.5', () => {
    is_correct('(1.5+2!)-46÷4-2!+5.5', -4.5);
});

test('2√4=2', () => {
    is_correct('2√4', 2);
});

test('2√9=3', () => {
    is_correct('2√9', 3);
});

test('3√8=2', () => {
    is_correct('3√8', 2);
});

test('4√16=2', () => {
    is_correct('4√16', 2);
});

test('2√4.41=2.1', () => {
    is_correct('2√4.41', 2.1);
});

test('2√(2+7)=3', () => {
    is_correct('2√(2+7)', 3);
});

test('(2+2-2)√(2+7)=3', () => {
    is_correct('(2+2-2)√(2+7)', 3);
});

test('((2+2)÷2)√(2+7)=3', () => {
    is_correct('((2+2)÷2)√(2+7)', 3);
});

test('2×2√16+5=13', () => {
    is_correct('2×2√16+5', 13);
});

test('5+2√((8×46)÷2%1)+65=70', () => {
    is_correct('5+2√((8×46)÷2%1)+65', 70);
});

test('5+8×45÷56^251%65+2√64-1=12', () => {
    is_correct('5+8×45÷56^251%65+2√64-1', 12);
});

test('5+8×45÷56^(251%65+2√64-1)=5', () => {
    is_correct('5+8×45÷56^(251%65+2√64-1)', 5);
});

test('5+8×45÷2√64^2-1%65=9.625', () => {
    is_correct('5+8×45÷2√64^2-1%65', 9.625);
});

test('5+8×45÷2√64^2-2!%65=8.625', () => {
    is_correct('5+8×45÷2√64^2-2!%65', 8.625);
});

test('5+8×45÷2√(64^2-2!%1)=10.625', () => {
    is_correct('5+8×45÷2√(64^2-2!%1)', 10.625);
});

test('5+8×45÷2√(1.5^2-2!%1)=245', () => {
    is_correct('5+8×45÷2√(1.5^2-2!%1)', 245);
});