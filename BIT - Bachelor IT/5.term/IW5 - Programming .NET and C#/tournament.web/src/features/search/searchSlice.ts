import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';
import { RootState, AppThunk } from '../../app/store';
import { useAppDispatch } from '../../app/hooks';
import searchClient from '../../api/searchClient';
import Model from '../../models/api/Model';
import Constants from "../../utils/Constants";
import Search from "../../models/Entities/Search";

export interface searchState {
  searchText: string|undefined ,
  status: string,
  records: Search
}

const initialState: searchState = {
  searchText: "",
  status: '',
  records:{
    players: [],
    teams: [],
    tournamentVenues: [],
  }
};

export const search = createAsyncThunk(
  'search/fetch',
  async (searchValue: string|undefined) => {
    try{
      const response = await searchClient.getAll({searchValue: searchValue});
      // The value we return becomes the `fulfilled` action payload
      return response.data;
    }
    catch(exception){
      return null;
    }
  }
);


export const searchSlice = createSlice({
  name: 'search',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    setSearchText: (state, action: PayloadAction<string|undefined>) => {
      state.searchText = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    //fetch
    builder
      .addCase(search.pending, (state) => {
        state.status = 'loading';
      })
      .addCase(search.fulfilled, (state, action) => {
          console.log("search fetch: ", action.payload)
         if(action.payload !== null){
          state.status = 'idle';
          state.records = action.payload;
        }
        else{
          state.status = 'failed';
        }
      });

  },
});


export const { setSearchText } = searchSlice.actions;

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`

export const getSearchText = (state: RootState) => state.search.searchText;
export const getSearchModel = (state: RootState) => state.search.records;

export default searchSlice.reducer;
