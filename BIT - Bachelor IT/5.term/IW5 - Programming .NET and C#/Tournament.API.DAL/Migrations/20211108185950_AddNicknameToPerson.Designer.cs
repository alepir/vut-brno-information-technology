// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Tournament.API.DAL.Database;

#nullable disable

namespace Tournament.API.DAL.Migrations
{
    [DbContext(typeof(TournamentDbContext))]
    [Migration("20211108185950_AddNicknameToPerson")]
    partial class AddNicknameToPerson
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0-rc.2.21480.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Tournament.API.DAL.Entities.GameEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TeamBlueId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeamBluePoints")
                        .HasColumnType("int");

                    b.Property<Guid>("TeamRedId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("TeamRedPoints")
                        .HasColumnType("int");

                    b.Property<Guid>("TournamentPlacementId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamBlueId");

                    b.HasIndex("TeamRedId");

                    b.HasIndex("TournamentPlacementId");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Tournament.API.DAL.Entities.PersonEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nickname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamEntityId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamEntityId");

                    b.ToTable("Persons");
                });

            modelBuilder.Entity("Tournament.API.DAL.Entities.TeamEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teams");
                });

            modelBuilder.Entity("Tournament.API.DAL.Entities.TournamentPlacementEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("TournamentPlaces");
                });

            modelBuilder.Entity("Tournament.API.DAL.Entities.GameEntity", b =>
                {
                    b.HasOne("Tournament.API.DAL.Entities.TeamEntity", "TeamBlue")
                        .WithMany("TeamBlueGames")
                        .HasForeignKey("TeamBlueId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tournament.API.DAL.Entities.TeamEntity", "TeamRed")
                        .WithMany("TeamRedGames")
                        .HasForeignKey("TeamRedId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Tournament.API.DAL.Entities.TournamentPlacementEntity", "TournamentPlacement")
                        .WithMany("Games")
                        .HasForeignKey("TournamentPlacementId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("TeamBlue");

                    b.Navigation("TeamRed");

                    b.Navigation("TournamentPlacement");
                });

            modelBuilder.Entity("Tournament.API.DAL.Entities.PersonEntity", b =>
                {
                    b.HasOne("Tournament.API.DAL.Entities.TeamEntity", "Team")
                        .WithMany("Persons")
                        .HasForeignKey("TeamEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("Tournament.API.DAL.Entities.TeamEntity", b =>
                {
                    b.Navigation("Persons");

                    b.Navigation("TeamBlueGames");

                    b.Navigation("TeamRedGames");
                });

            modelBuilder.Entity("Tournament.API.DAL.Entities.TournamentPlacementEntity", b =>
                {
                    b.Navigation("Games");
                });
#pragma warning restore 612, 618
        }
    }
}
